---
title: "Modern Statistical Computing"
subtitle: "3. Data wrangling"
author: "David Rossell"
institute: "Pompeu Fabra University"
execute:
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    scrollable: true
toc: true
toc-depth: 1
number-sections: false
mouse-wheel: true
code-overflow: scroll
code-line-numbers: false
code-copy: true
cache: true
title-slide-style: pandoc
bibliography: references.bib
---

## Reproducing these lecture notes

Load the required R packages.

```{r, warning=FALSE}
library(tidyverse)
library(gapminder)
library(Lahman)
library(nycflights13)
```


##

Before doing data analysis you need to put data in the right format, define variables etc.

- R offers a number of base functions

- Tidyverse package `dplyr` adds many convenient functions


## Dataset NYC flights

All 336,776 flights departing from New York in 2013. We display a few rows (type `View(flights)` to open the full data in RStudio)

The data are stored in a `tibble`, an extension of `data.frame` that prints nicer and shows some info:
`int` means integer, `dbl` real numbers, `chr` character vectors,`lgl` logical, `fctr` factor, `date` dates, `dttm` date-time

```{r}
flights
```

# Data wrangling with dplyr

## dplyr

The 5 main functions

- Select observations (rows) in a dataset: `filter()`

- Reorder the rows: `arrange()`

- Select variables by their names: `select()`

- Create new variables: `mutate()`

- Compute numerical summaries: `summarise()`. If used with `group_by()`, it operates by groups

Other functions: `rename`, `transmute`


## Filter {auto-animate="true"}

```{r}
jan1= filter(flights, month == 1, day == 1)
jan1
```

## Filter {auto-animate="true"}

```{r}
jan1= filter(flights, month == 1 & day == 1)
jan1
```

## Data frames and matrices

::: panel-tabset

`filter` etc work on tibbles and data frames, but not matrices. They always return a tibble

```{r}
class(flights)
```

### data.frame


```{r}
flightsdf= as.data.frame(flights)
class(flightsdf)
filter(flights, month == 1 & day == 1)
```

### matrix

`filter` doesn't work on matrices

```{r, error=TRUE}
flightsm= as.matrix(flights[,1:3])
filter(flightsm, month == 1 & day == 1)
```

But we can easily select rows/columns with R's base functionality

```{r}
sel= (flights[,'month']==1) & (flightsm[,'day']==1)
flightsel= flightsm[sel,]
flightsel[1:5,1:3]
```

:::


## Missing values

`filter` returns rows where the specified criterion is `TRUE`. 
Missing's (`NA`) are excluded

```{r}
# Let x be Mary's age. We don't know how old she is.
x= NA
x == 20 #is Mary 20?

# Let y be John's age. We don't know how old he is.
y= NA
x == y # Are John and Mary the same age?
```

To select rows with missing values, use `is.na`

```{r}
df= tibble(x = c(1, NA, 3))
filter(df, is.na(x) | x > 1)
```

## Arrange

You can sort by several variables

```{r}
arrange(flights, year, month, day)
```

To sort in a descending fashion use `desc`

```{r}
arrange(flights, desc(year), desc(month), desc(day))
```


## Selecting/dropping variables

:::panel-tabset

### Select

```{r}
select(flights, year, month, day, dep_delay)
```

### Drop

```{r}
select(flights, -year, -month,-day)
```

:::

---

Useful functions to select variables by name

- starts_with("abc"): matches names that begin with "abc"

- ends_with("abc"): matches names that end with "abc"

- contains("abc"): matches names that contain "abc"

- num_range("x", 1:3): matches x1, x2 and x3.

```{r}
select(flights, contains("delay"))
```

---

Trick to put some columns at the start. Select them, then use `everything`

```{r}
select(flights, time_hour, air_time, everything())
```


## Rename

Change variable names

```{r}
rename(flights, deptime = dep_time)
```



## Mutate

We select a subset of columns and create 2 new ones

:::panel-tabset

### Without pipe

```{r}
flights_sml= select(flights, year:day, contains("delay"), distance, air_time)

mutate(flights_sml, gain=dep_delay - arr_delay, speed = distance / air_time * 60)
```

### Using pipe

```{r}
flights_sml= select(flights, year:day, contains("delay"), distance, air_time) |>
             mutate(gain=dep_delay - arr_delay, speed = distance / air_time * 60)
flights_sml
```

:::

---

To only keep the new variables use `transmute`

```{r}
transmute(flights, gain = dep_delay - arr_delay, hours = air_time / 60)
```

## Example 

Companies get fined 100eur per hour of delay in departure, and 200eur/h of delay in arrival. There's no reward for being early

- United airlines negotiates a discount from 100 to 75

- American airlines gets a discount from 200 to 150

---

```{r}
mutate(flights, uaflight= (carrier=='UA'), aaflight= (carrier=='AA')) |>
  mutate(finedep= ifelse(uaflight, 75, 100) * dep_delay/60) |>
  mutate(finearr= ifelse(aaflight, 150, 200) * arr_delay/60) |>
  mutate(finedep= ifelse(finedep>0, finedep, 0), finearr= ifelse(finearr>0, finearr, 0)) |>
  mutate(fine= finedep + finearr) |>
  select(carrier, dep_delay, arr_delay, fine)
```


# Summarizing data

## Summarizing by groups

Base R has `aggregate` to compute a single summary (e.g. the mean)

- For >1 summaries `dplyr` is more convenient

- `dplyr` also runs faster

```{r}
aggregate(dep_delay ~ year + month + day, data=flights, FUN=mean, na.rm=TRUE)
```

## Summarizing by groups

dplyr has two key functions: `summarise` and `group_by`

```{r}
by_day= group_by(flights, year, month, day) #create new (grouped) tibble
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
```

## Example

Flight distance vs. delay, for each destination airport with >20 flights other than Honolulu. Note the use of `n()` 

::: panel-tabset

### R code

```{r}
by_dest= group_by(flights, dest)
delay= summarise(by_dest, count = n(),
  dist = mean(distance, na.rm = TRUE),
  delay = mean(arr_delay, na.rm = TRUE)
)
delay= filter(delay, count > 20, dest != "HNL") #>20 flights, remove Hololulu
delay
```

### Plot

```{r}
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
  geom_point(aes(size = count), alpha = 1/3) +
  geom_smooth(se = FALSE)
```

:::

## Same using pipes

Avoid creating intermediate datasets (`by_dest` in the previous slide)

```{r}
delays= group_by(flights, dest) |> 
  summarise(count = n(),
    dist = mean(distance, na.rm = TRUE),
    delay = mean(arr_delay, na.rm = TRUE)
  ) |> 
  filter(count > 20, dest != "HNL")
delays
```

## Useful summaries

- Classical: `mean`, `sd`, `sum`, `min`, `max`

- Robust to outliers: `median`, `mad`, `quantile`, `IQR`  

- Counts: `n`, `sum(is.na())`, `n_distinct()` 

Example: number of flights with early departure (<5:00am)

```{r}
flights |>
  group_by(year, month, day) |>
  summarise(n_early = sum(dep_time < 500, na.rm=TRUE))
```

## Ungrouping

```{r}
daily= group_by(flights, year, month, day)
summarise(daily, flights = n())
```

Ungrouping

```{r}
daily= ungroup(daily)
summarise(daily, flights = n())
```


# Further examples

Cancelled flights have NA departure/arrival delays. Select non-cancelled flights and compute mean delay for each airplane (variable `tailnum`)

::: columns
::: {.column width="70%"}

```{r}
not_cancelled= filter(flights, !is.na(dep_delay), !is.na(arr_delay))
delays= group_by(not_cancelled, tailnum) |>
  summarise(count= n(), delay = mean(arr_delay))

ggplot(data = delays, mapping = aes(x = delay)) + 
  geom_freqpoly(binwidth = 10)
```

:::

::: {.column width="30%"}

Some airplanes have very large mean delays! What is the reason?

:::

:::

---

Extreme mean delays mostly in planes with few flights (central limit theorem in action!).
The mean delay is actually pretty constant

```{r}
ggplot(delays, aes(x=count, y=delay)) +
  geom_point() +
  geom_smooth()
```

## Batting averages

For each player, compute batting average (hits `H` / opportunities to hit the ball `AB`)

```{r}
batting= as_tibble(Lahman::Batting)
batting

batters= group_by(batting, playerID) |> 
  summarise(
    ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    ab = sum(AB, na.rm = TRUE)
  )
```

---

Batting average's mean & variance associated with opportunities to hit. Can you think of a reason why?

```{r}
  filter(batters, ab > 100) |>
  ggplot(mapping = aes(x = ab, y = ba)) +
    geom_point() + 
    geom_smooth(se = FALSE) +
    labs(x='Opportunities to hit', y='Batting average')
```

## Counts

Two equivalent ways to count: `summarise` and `count`

**Example.** Data `diamonds`. How many diamonds of each (color, cut)?

:::panel-tabset

### summarize

```{r, message=FALSE, warning=FALSE}
tab= group_by(diamonds, color, cut) |> summarise(count=n())
tab
```

### count

```{r}
tab= count(diamonds, color, cut)
tab
```

:::

## Counts

We can visualize the counts with `geom_tile` 

```{r}
ggplot(tab, mapping = aes(x = color, y = cut)) +
    geom_tile(mapping = aes(fill = n))
```


## Discretize continuous variables

`cut_interval`, `cut_number`, `cut_width`: chop a continuous variable into groups

**Example.** Boxplot of diamond price vs. (discretized) carats


::: panel-tabset

### Mutate

```{r}
diam2= mutate(diamonds, carat_disc= cut_width(carat, 0.1))
ggplot(diam2, aes(x = carat, y = price)) + 
  geom_boxplot(aes(group = carat_disc))
```

### Aesthetic

Same result, using `cut_width` within an aesthetic

```{r}
ggplot(diamonds, mapping = aes(x = carat, y = price)) + 
  geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
```

:::


# Exercise

---

To do Exercises 1-2 below load the gapminder data

```{r, eval=FALSE}
library(gapminder)
gapminder
```

Turn in a single html with your solutions at Aula Global
Name your file firstname_lastname.html


## Exercises

**Exercise 1.** Continent-wide life expectancy

1. Compute the mean life expectancy and GDP per capita for each (continent, year)

2. Do an animated scatterplot of continent life expectancy vs. GDP (`transition_time(year)`)


**Exercise 2.** Inequality of GDP/capita across countries over time

1. For each year, compute the inter-quartile range of the GDP/capita across countries

2. Do a scatterplot of IQR vs. year. Add lines to the plot


# Data import and export


## Main functions

In RStudio: `File -> Import Dataset` makes life easy

Main functions to import data

- `read.table`, `read.csv`: R base functions for text files

- `read_csv`, `read_tsv`: (faster) tidyverse functions for comma/tab separated files

- `readxl`: Excel (.xls and .xlsx)

- `DBI`: database queries (SQL)

Web scraping and much more (packages `purrr`,`jsonlite`,`xml2`, `rio`...)

Export data

- `write.table`, `write.csv`


## .RData files

`save` stores any specified objects in an `.RData` file (for large files use `compress=TRUE`). 

```{r, eval=FALSE}
x= rnorm(20)
y= 10 + 5*x + rnorm(20)  #simulate data from a linear regression, errors N(0,1)
fit= lm(y ~ x)
save(x, y, fit, file='myfile.RData', compress=TRUE)
```

`load` loads the file and all objects saved therein

```{r, eval=FALSE}
load('myfile.RData')
fit
```


# Tidying data

---

Data can be stored in different formats. In a tidy dataset, each variable is a column, each observation a row

This dataset is tidy

```{r}
country= c('UK','UK','Spain','Spain')
year= c(2022,2023,2022,2023)
population= c(80.5,81.4,50.1,50.0)
tab= tibble(country, year, population)
tab
```

This one has the same data, but is not tidy

```{r}
country= c('UK','Spain')
y2022= c(80.5,50.1); y2023= c(81.4,50.0)
tab2= tibble(country, y2022, y2023)
names(tab2)[2:3]= c('2022','2023')
tab2
```


## Tidying a dataset

Often a dataset is not tidy for one these two reasons

1. A single variable is stored in several columns

2. A single individual is stored in multiple rows

`pivot_longer` deals with 1 (data are made longer, i.e. more rows). `pivot_shorter` deals with 2

## Example

Below 2022-2023 are values of the variable year

```{r}
tab2
```

- Take columns 2022, 2023

- The column names should be values of variable `year`

- Their values should be in a variable `population`

```{r}
pivot_longer(tab2, cols=c('2022','2023'), names_to="year", values_to= "population")
```

## Separating columns

Sometimes a character needs to be separated into several ones

```{r}
tab= tibble(date=c("25/12/22","26/12/22"), date2=c("251222","261222"))
tab
```

`separate`: indicate character to split by. `convert=TRUE` tries to convert into numeric

```{r}
separate(tab, col=date, sep='/', into=c('day','month','year'), convert=TRUE)
```

Or positions at which to split

```{r}
separate(tab, col=date2, sep=c(2,4), into=c('day','month','year'))
```

## Uniting columns

Consider the dataset `stab`

```{r}
stab= separate(tab, col=date2, sep=c(2,4), into=c('day','month','year')) |>
  select(-date)
stab
```

We use `unite` to paste columns together. The 2nd argument is the new column name, then we specify the columns to be pasted. `sep` is an optional separation character

```{r}
unite(stab, date, day, month, year, sep="-")
```



# Relational data

---

Databases may be stored in different tables (saves space and transfer time)

```{r}
library(nycflights13)
```

::: panel-tabset

### flights

```{r}
flights
```


### airlines

```{r}
airlines
```

:::


## Basic functions

- R base: `merge`

- dplyr (tidyverse): `left_join`, `right_join`, `inner_join`, `full_join`

Similar functionality, `dplyr` usually faster


| dplyr           | Base R                            |
|-----------------|-----------------------------------|
|`left_join(x,y)` | `merge(x,y,all.x=TRUE)`           |
|`right_join(x,y)`| `merge(x,y,all.y=TRUE)`           |
|`inner_join(x,y)`| `merge(x,y)`                      |
|`full_join(x,y)` | `merge(x,y,all.x=TRUE,all.y=TRUE)`|



## Merge

```{r}
flightsdep= select(flights, c('year','month','day','dep_time','carrier'))
left_join(flightsdep, airlines, by='carrier')
```


