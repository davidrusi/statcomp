---
title: "Modern Statistical Computing"
subtitle: "1. Basics"
author: "David Rossell"
institute: "Pompeu Fabra University"
execute:
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    scrollable: true
toc: true
toc-depth: 1
number-sections: false
mouse-wheel: true
code-overflow: scroll
code-line-numbers: false
code-copy: true
cache: false
title-slide-style: pandoc
bibliography: references.bib
---

## Reproducing these lecture notes

Quarto markdown `01_Basics.qmd`

Required R packages

```{r, eval=FALSE}
install.packages("dplyr")
install.packages("ggplot2")
install.packages("forcats")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("rstudio-education/dsbox")
```

Once they're installed, load them.

```{r, warning=FALSE}
library(tidyverse)  #also loads ggplot2
library(forcats)
library(dplyr)
library(dsbox)
```

# Why Statistical Computing?

## Data science and Statistics

Data science dubbed the sexiest job of the 21st century by [Harvard business review](https://hbr.org/2022/07/is-data-scientist-still-the-sexiest-job-of-the-21st-century) and is in high-demand [(see World Data Science)](https://www.worlddatascience.org/blogs/why-data-science-is-the-most-indemand-skill-now-and-how-can-you-prepare-for-it)

Statistical computing is one of its core components. We focus on R

-   Great for statistical analyses, plots, reports and *reproducibility*

-   Active community. Lots of resources, latest advances

-   Multi-platform, free, open-source

-   One of the most popular programming languages [(r4stats review)](https://r4stats.com/articles/popularity) [(Tiobe index)](https://www.tiobe.com/tiobe-index)

Note: Python more popular for Machine learning, lags a bit behind in Statistics


## Statistical computing

Our definition of statistical computing

- Includes programming, but is not just programming

- Includes data analysis, but is not just data analysis

A road map

- Data visualization & manipulation

- Models for continuous/binary/count data, interpretation, model-checking

- Computationally-intensive methods for inference (to relax assumptions)

- Reproducible & interactive reports

- Bits of cool topics in data science


## Resources

Install R from [here](https://www.r-project.org/), then posit (RStudio) from [here](https://posit.co/)

Alternatively, [posit cloud](https://posit.cloud) has a free plan

**Books and tutorials**

-   Jared Lander's *R for everyone*

-   Hadley Wickam's [R for Data Science](https://r4ds.had.co.nz). [Second edition](https://r4ds.hadley.nz)

-   Paul Roback & Julie Legler's [Applied GLMs and multilevel models](https://bookdown.org/roback/bookdown-BeyondMLR)

-   RStudio [tutorials](https://education.rstudio.com/learn)

-   RStudio [books](https://www.rstudio.com/resources/books)

## Get RStudio started

When starting a new project, I recommend `File -> New project`

-   All R code, data, figures, reports stored in a single folder

-   You can share the entire folder, and upload it at Github

Main file types

-   Pure R code: `File -> New file -> R script`

-   [Markdown](https://rmarkdown.rstudio.com): `File -> New file -> R markdown`

-   [Quarto](https://quarto.org): `File -> New file -> Quarto document`

Markdown/quarto combine text and R code. Compile into html/pdf/word

-   These slides were created with quarto

-   In quarto you can combine R, Python & Julia code

# First examples

## 

> "The simple graph has brought more information to the data analyst's mind than any other device" - John Tukey

Let's dive in! We load dataset `starwars` included in package `dplyr`

```{r, warning=FALSE, message=FALSE}
starwars
```

<small> Note: `tibble` is an extension of `data.frame`, to be discussed </small>

## 

Scatterplots help reveal trends, and **outliers**

```{r}
par(mar = c(4, 4, 1, .1)) #set plot margins (amount of white space)
plot(starwars$height, starwars$mass, xlab='Height (cm)', ylab='Mass (kg)')
```

## 

Same figure, now using `ggplot` (to be discussed)

```{r fig.width = 10, warning = FALSE, echo=TRUE, out.width = "50%"}
#| code-fold: true
ggplot(data = starwars, mapping = aes(x = height, y = mass)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters", x="Height (cm)", y="Weight (kg)") +
  geom_point(data= starwars %>% filter(name=="Jabba Desilijic Tiure"), size=5, pch=1, color="pink", stroke=3)
```

## Histogram

Duke university student survey data (`student_survey`) from package `dsbox`

```{r}
tt= 'How old were you when you had the first kiss'
fk= student_survey$first_kiss
```

Let's first use R's basic function `hist`

::: columns
::: {.column width="50%"}
```{r histkiss}
hist(fk,xlab='Years',main=tt)
```
:::

::: {.column width="50%"}
```{r histkissprob}
hist(fk,prob=TRUE,xlab='Years',main=tt)
```
:::
:::

------------------------------------------------------------------------

Next use `ggplot` and adjust the bin width

```{r histkissgg, warning = FALSE}
#| code-fold: true
ggplot(student_survey, aes(x = first_kiss)) +
  geom_histogram(binwidth = 1) +
  labs(title = "How old were you when you had your first kiss?", x = "Age (years)", y = NULL)
```

# R basics

------------------------------------------------------------------------

Operating with vectors: recycling, accessing elements

```{r comment='#'}
x= 1; y= c(1,3,5)  
z= x+y      
z
length(z)
z[1]
z[c(1,2)]
z[1:2]
z[c(TRUE,TRUE,FALSE)]
z[4]= 7
z
z/2
```

------------------------------------------------------------------------

Basic data types: <small> `numeric`, `double`, `integer`, `logical`, `character`, `factor` </small>

```{r}
class(z)
is.double(z)
is.integer(z)
as.integer(z)
as.character(z)
```

```{r}
sel= (z>5) #create a logical vector
sel
sel + 1  #logical vectors are internally 0/1's
```

```{r}
any(z>5)
all(z>5)
```

------------------------------------------------------------------------

## Example

Boxplot: height distribution vs. skin color (human/non-human)?

```{r swboxplot}
mycols= c('fair','white','light','brown','dark')
starwars$human_skincolor= ifelse(starwars$skin_color %in% mycols, 'human', 'non-human')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
```

## Character vs. factors

Characters are designed for free text, e.g. they can be searched

```{r error=TRUE}
x= c('Low','Low','Medium','High')
x
nchar(x)       #number of characters
grep('Lo', x)  #entries containing string 'Lo'
```

Factors are designed for categorical variables.
They're treated differently by many R functions, e.g. regression models

```{r}
xf= factor(x)
xf
table(xf)
```


## Factor basics

Specify order of factor levels

```{r}
m= c("Dec", "Dec", "Apr", "Jan", "Mar","Apr","May","Dec","May") 
month_levels= c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
m= factor(m, levels=month_levels)
table(m)
```

Arrange levels by decreasing frequency (use `fct_rev` for increasing)

```{r}
mo= fct_infreq(m) #rearrange levels
mo  #values stay the same
table(mo) #table printed in rearranged order
```

---

Keep top 3 categories, group others

```{r}
mtop= fct_lump(mo, n=3)
table(mtop)
```

Recode factor levels

```{r}
season= fct_collapse(m,
             "Winter"=c("Jan","Feb","Mar"),
             "Spring"=c("Apr","May","Jun"),
             "Summer"=c("Jul","Aug","Sep"),
             "Fall"=c("Oct","Nov","Dec")
             )
table(season)
```





## Missing values

```{r, error=TRUE}
x= c(1,5,NA,10)
mean(x)
mean(x, na.rm=TRUE)
sd(x, na.rm=TRUE)

is.na(x)
```

## Pipes

- Base R: `|>` (newer, simpler options)
- magrittr package: `%>%` (advanced options)

Both take the output of an expression and insert it as the 1st argument of the function on the right-hand side. That is, `x |> f()` is the same as `f(x)`


```{r}
x= 1:10; mean(x)
x |> mean()
```
Multiple pipes can be concatenated. Sometimes pipes save programming effort, some people find them easier to read (e.g. the [tidyverse](https://www.tidyverse.org) uses lots of pipes)

```{r}
sum(is.na(x))
x |> is.na() |> sum()
```

## Pipes

You can pass the output to an argument other than the first

```{r}
#R base uses _ as place-holder. The argument name must be specified
4 |> log(base=2)   #log(4, base=2)
4 |> log(2,base=_) #log(2, base=4)
```

The Rstudio shortcut to insert the pipe is ctrl + shift + m. To use `|>` instead of `%>%` go to `Tools -> Global options -> Code -> "Use native pipe operator"`


## Data structures

-   `list`: like a vector, but each entry can be of a different type

-   `matrix`: two-dimensional vector, all entries must be numeric

-   `data.frame`: rectangular dataset, each column can have a different type

-   `tibble`: the tidyverse extension of `data.frame`

```{r}
m= matrix(1:9, nrow=3, ncol=3, byrow=FALSE)
m
m[1:2,1:2]
m[1,]             #returns a vector
m[1,,drop=FALSE]  #returns a matrix
```

------------------------------------------------------------------------

Row and colum names, and recycling (applies column-wise)

```{r}
rownames(m)= c('r1','r2','r3'); colnames(m)= c('c1','c2','c3')
m
m[c('r1','r2'),c('c1','c2')]
m + c(0,1,2)
```

## Data frame

Similar to matrix, but columns may be of different types


```{r}
mdf= as.data.frame(m); mdf$name= c('Laura','Paul','Lyz')
mdf
names(mdf)  #colnames doesn't work on data frames
```

```{r}
mdf$name      #access column with $
mdf[,'name']  #access column as in a matrix
mdf[,4]       #access column by index
```


## tibbles

The class `tibble` extends `data.frame`

- All operations that work on data frames work on tibbles

- Tibbles have some extra operations (methods)

- `as_tibble` converts a matrix/data frame into a tibble

For now, let's just say that tibbles print prettier on the screen (just a few rows are shown, info is given on each column)

```{r}
mtbl= as_tibble(mdf)
mtbl
```


## Lists

```{r}
x= list(a=1:5, b=c('hey','you'), c=m)
x
x[1:2]  #sub-list
x[1]    #sub-list with one element (returns a list)
x[[1]]  #access 1st element (doesn't return a list)
```

## Concatenating

```{r}
x= c(1,2,3); y= c(4,5,6)
c(x,y)
cbind(x,y)
rbind(x,y)
cbind(1,x)
```

## Exercise

In the `starwars` data we saw an outlier in mass. Select the character (row) such that
mass is not missing and mass >500 kg

- What is its name and home world?

- In which films did (s)he appear? (note: variable `starwars$films` is a list)

```{r}
par(mar = c(4, 4, 1, .1))
plot(starwars$height, starwars$mass, xlab='Height (cm)', ylab='Mass (kg)')
```




